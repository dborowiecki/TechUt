package com.example.Zadanie2.service;

import com.example.Zadanie2.domain.Alcohol;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class AlcoholService {
    public Connection getConnection() {
        return connection;
    }

    Connection connection;
    private String url = "jdbc:hsqldb:hsql://localhost/workdb";
    private Statement statement;

    private String createTableAlcohol = "CREATE TABLE Alcohol(id bigint GENERATED BY DEFAULT AS IDENTITY,"
                                        +"name varchar(20) UNIQUE,"
                                        +"producer varchar(20),"
                                        +"production_year integer, "
                                        +"type varchar(30), volt float)";


    private PreparedStatement addAlcoholStmt;
    private PreparedStatement deleteAllAlcoholsStmt;
    private PreparedStatement getAllAlcoholsStmt;
    
    public AlcoholService() throws SQLException{
        try {
            connection = DriverManager.getConnection(url);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Alcohol".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(createTableAlcohol);

            addAlcoholStmt        = connection.prepareStatement("INSERT INTO Alcohol (name, producer, production_year, type, volt) VALUES (?, ?, ?, ?, ?)");
            deleteAllAlcoholsStmt = connection.prepareStatement("DELETE FROM Alcohol");
            getAllAlcoholsStmt    = connection.prepareStatement("SELECT id, name, producer, production_year, type, volt FROM Alcohol");

        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    void clearAlcohols() {
        try {
            deleteAllAlcoholsStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    //@Override
    public int addAlcohol(Alcohol Alcohol) {
        int count = 0;
        try {
            addAlcoholStmt.setString(1, Alcohol.getName());
            addAlcoholStmt.setString(2, Alcohol.getProducer());
            addAlcoholStmt.setInt(3, Alcohol.getYearOfProduction());
            addAlcoholStmt.setString(4, Alcohol.getType());
            addAlcoholStmt.setFloat(5, Alcohol.getVolt());

            count = addAlcoholStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    //@Override
    public List<Alcohol> getAllAlcohols() {
        List<Alcohol> Alcohols = new ArrayList<Alcohol>();

        try {
            ResultSet rs = getAllAlcoholsStmt.executeQuery();

            while (rs.next()) {
                Alcohol p = new Alcohol();
                p.setId(rs.getInt("id"));
                p.setName(rs.getString("name"));
                p.setProducer(rs.getString("producer"));
                p.setYearOfProduction(rs.getInt("production_year"));
                p.setType(rs.getString("type"));
                p.setVolt(rs.getFloat("volt"));
                Alcohols.add(p);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return Alcohols;
    }

    //@Override
    public void addAllAlcohols(List<Alcohol> Alcohols) {

        try {
            connection.setAutoCommit(false);
            for (Alcohol Alcohol : Alcohols) {
                addAlcoholStmt.setString(1, Alcohol.getName());
                addAlcoholStmt.setString(2, Alcohol.getProducer());
                addAlcoholStmt.setInt(3, Alcohol.getYearOfProduction());
                addAlcoholStmt.setString(4, Alcohol.getType());
                addAlcoholStmt.setFloat(5, Alcohol.getVolt());
                addAlcoholStmt.executeUpdate();
            }
            connection.commit();

        } catch (SQLException exception) {

            try {
                connection.rollback();
            } catch (SQLException e) {
                e.printStackTrace();
                //!!!! ALARM
            }
        }
    }

    public static void main(String[] args) {
        try {
            AlcoholService test = new AlcoholService();
            //test.addAlcohol(new Alcohol("Murphy's Stout", "Murphy", 2018, "piwo", 4.27f));
            System.out.println(test.getAllAlcohols());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
