package com.dmn.Projekt.service;

import com.dmn.Projekt.domain.Alcohol;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
//TODO Różne metody typu szukaj
//TODO METODA TRANZAKCYJNA (Przynajmniej jedna)
public class AlcoholService {
    public Connection getConnection() {
        return connection;
    }

    Connection connection;
    private String url = "jdbc:hsqldb:hsql://localhost/workdb";
    private Statement statement;

    private String createTableAlcohol = "CREATE TABLE Alcohol(id bigint GENERATED BY DEFAULT AS IDENTITY,"
                                        +"name varchar(20) UNIQUE,"
                                        +"producer varchar(20),"
                                        +"production_year integer, "
                                        +"type varchar(30), volt float)";


    private PreparedStatement addAlcoholStmt;
    private PreparedStatement deleteAllAlcoholsStmt;
    private PreparedStatement getAllAlcoholsStmt;
    private PreparedStatement getAllAlcoholsByParam;

    public AlcoholService(){
        try {
            connection = DriverManager.getConnection(url);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Alcohol".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists) {
                statement.executeUpdate(createTableAlcohol);
            }

            addAlcoholStmt        = connection.prepareStatement("INSERT INTO Alcohol (name, producer, production_year, type, volt) VALUES (?, ?, ?, ?, ?)");
            deleteAllAlcoholsStmt = connection.prepareStatement("DELETE FROM Alcohol");
            getAllAlcoholsStmt    = connection.prepareStatement("SELECT id, name, producer, production_year, type, volt FROM Alcohol");

        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    void clearAlcohols() {
        try {
            deleteAllAlcoholsStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public int addAlcohol(Alcohol Alcohol) {
        int count = 0;
        try {
            addAlcoholStmt.setString(1, Alcohol.getName());
            addAlcoholStmt.setString(2, Alcohol.getProducer());
            addAlcoholStmt.setInt(3, Alcohol.getYearOfProduction());
            addAlcoholStmt.setString(4, Alcohol.getType());
            addAlcoholStmt.setFloat(5, Alcohol.getVolt());

            count = addAlcoholStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public List<Alcohol> getAllAlcohols() {
        List<Alcohol> listOfAlcohols = new ArrayList<Alcohol>();

        try {
            ResultSet rs = getAllAlcoholsStmt.executeQuery();

            listOfAlcohols = getAllAlcoholsFromResultSet(rs);

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return listOfAlcohols;
    }

    public void addAllAlcohols(List<Alcohol> Alcohols) {

        try {
            connection.setAutoCommit(false);
            for (Alcohol alcohol : Alcohols) {
                addAlcoholStmt.setString(1, alcohol.getName());
                addAlcoholStmt.setString(2, alcohol.getProducer());
                addAlcoholStmt.setInt(3, alcohol.getYearOfProduction());
                addAlcoholStmt.setString(4, alcohol.getType());
                addAlcoholStmt.setFloat(5, alcohol.getVolt());
                addAlcoholStmt.executeUpdate();
            }
            connection.commit();

        } catch (SQLException exception) {

            try {
                connection.rollback();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public List<Alcohol> getAllAlcoholsByType(String type){
        return getAllAlcoholsByParameter("type", type);
    }

    public List<Alcohol> getAllAlcoholsByParameter(String parameter, String parameterValue){
        List<Alcohol> listOfAlcohols = new LinkedList<>();
        try {
            getAllAlcoholsByParam = connection.prepareStatement(
                    "SELECT id, name, producer, production_year, type, volt "
                    +"FROM Alcohol where "
                            +parameter+" = ?"
            );
            getAllAlcoholsByParam.setString(1, parameterValue);
            ResultSet rs = getAllAlcoholsByParam.executeQuery();
            listOfAlcohols = getAllAlcoholsFromResultSet(rs);

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return listOfAlcohols;

    }

    private Alcohol getAlcoholFromResult(ResultSet rs) throws SQLException{
        Alcohol p = new Alcohol();
        p.setId(rs.getInt("id"));
        p.setName(rs.getString("name"));
        p.setProducer(rs.getString("producer"));
        p.setYearOfProduction(rs.getInt("production_year"));
        p.setType(rs.getString("type"));
        p.setVolt(rs.getFloat("volt"));
        return p;
    }

    private List<Alcohol> getAllAlcoholsFromResultSet(ResultSet rs) throws SQLException{
        List<Alcohol> allAlcohols = new LinkedList<>();
        while (rs.next()){
            Alcohol next = getAlcoholFromResult(rs);
            allAlcohols.add(next);
        }
        return allAlcohols;
    }
}
